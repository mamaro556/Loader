
@model IEnumerable<UpmessageMVCNETCore.PostBL>

@{
    Layout = null;
    ViewBag.Title = "Ownone";
    var i = 1;
}
@{
    void indent(int level)
    {

    @for (var i = 0; i < level; i++)
        {
    <text> &nbsp; &nbsp; </text>
        }

    }

    void WriteChildren(IList<UpmessageMVCNETCore.PostBL> children,  int stackLevel)
    {
       
    @foreach (var post in children)
    {
             var i = stackLevel;
    <div>
                                                                         @if (post.Title != null && !string.IsNullOrEmpty(post.Title))
             {
                        
                                                                            <div>
                                                                                @{indent(i);}
                                                                                @Html.DisplayFor(modelItem => post.Title)
                                                                            </div>
             }
                                                                         <div>
                                                                                @{indent(i);}
                                                                                @Html.DisplayFor(modelItem => post.UserID)&nbsp;&nbsp;@Html.DisplayFor(modelItem => post.DateCreated)</div>
                                                                         @if (post.Body != null && !string.IsNullOrEmpty(post.Body))
             {

                                                                            <div>
                                                                                @{indent(i);}
                                                                                @Html.DisplayFor(modelItemx => post.Body)
                                                                            </div>
             }
                                                                        <div>@Html.Hidden("ParentID" + post.PostID, post.PostID)
                                                                        @{indent(i);}@Html.ActionLink("Reply", null , null, null,new {@id="A" + post.PostID})</div>

    </div>
            if (post.Children.Count > 0) {
                i++;
                WriteChildren(post.Children, i);
            }
        }

    }
}
<!DOCTYPE html>

<html>
    <head>
<script type='text/javascript'>
  window.smartlook||(function(d) {
    var o=smartlook=function(){ o.api.push(arguments)},h=d.getElementsByTagName('head')[0];
    var c=d.createElement('script');o.api=new Array();c.async=true;c.type='text/javascript';
    c.charset='utf-8';c.src='https://rec.smartlook.com/recorder.js';h.appendChild(c);
    })(document);
    smartlook('init', '24dcdc2dd040c8f0b66b7f5a662a654a1ed9d097');
</script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="https://www.google.com/recaptcha/api.js?render=6LdlUOUhAAAAAPAqzi4rz9raWfN18OMhYlE7gFD_"></script>
<script>

    $(document).ready(function() {

        $('a').click(function(event) {
            event.preventDefault();
            alert("clicked");
            alert($(this).prev().val());
        });
        $('#X').click(function(event) {
            grecaptcha.ready(function() {
                //event.preventDefault();
                grecaptcha.execute('6LdlUOUhAAAAAPAqzi4rz9raWfN18OMhYlE7gFD_', { action: 'Index' }).then(function(token) {
                    $('#GoogleCaptchaToken').val(token);
                    $('#postform').submit();         
                });
            });
        });   
    });
</script>
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
<link rel="stylesheet" href="~/css/site.css" />
<link rel="stylesheet" href="~/css/StyleSheet1.css" />
</head>
<body>
<h1 style="text-align:center">Youknow                   </h1>

<p>
</p>

<p></p>
        @using (Html.BeginForm("Index", "Db", FormMethod.Post, new {id = "postform"}))
        {
            <div class="TextDiv">
                <div>
                    Title:<br/>@Html.TextBox("Title", "", null)
                </div>
                <div>
                    Text:<br/>@Html.TextArea("Body","", 2,2, new{ @class ="TextA"})
                    @Html.Hidden("G", "456xyzd")
                    @* Html.HiddenFor(m=>m.First().GoogleCaptchaToken *@
                    @Html.Hidden("GoogleCaptchaToken")
                </div>
                <div><input type="button" id = "X" value="Post"/></div>
            </div>
        } 
.
@foreach (var item in Model)
{
        <div class="box">
        
            @if (item.Title != null && !string.IsNullOrEmpty(item.Title))
            {
                <div>
                    @Html.DisplayFor(modelItem => item.Title)
                </div>
            }
            <div>@Html.DisplayFor(modelItem => item.UserID)&nbsp;&nbsp;@Html.DisplayFor(modelItem => item.DateCreated)</div>
            @if (item.Body != null && !string.IsNullOrEmpty(item.Body))
            {
                <div>
                    @Html.DisplayFor(modelItem => item.Body)
                </div>
            }

            <div>@Html.Hidden("ParentID" + item.PostID, item.PostID)
            @Html.ActionLink("Reply", null , null, null,new {@id="A" + item.PostID})  </div>

            @{
                WriteChildren(item.Children, 1);
            }
        </div>
}
</body>
</html>